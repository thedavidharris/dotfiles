[alias]

	# List git aliases
	aliases = config --get-regexp alias

	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# View the current working tree status using the short format
	s = status -s

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"

	# Clone a repository including all submodules
	c = clone --recursive

	# Commit all changes
	ca = !git add -A && git commit -av

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
	
	# Push and set upstream
#	gpo="git push --set-upstream origin $(git branch | awk '/^\* / { print $2 }')"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	# Merge GitHub pull request on top of the current branch or,
	# if a branch name is specified, on top of the specified branch
	mpr = "!f() { \
		declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
		declare branch=\"${2:-$currentBranch}\"; \
		if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
			git fetch origin refs/pull/$1/head:pr/$1 && \
			git checkout -B $branch && \
			git rebase $branch pr/$1 && \
			git checkout -B $branch && \
			git merge pr/$1 && \
			git branch -D pr/$1 && \
			git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
		fi \
	}; f"

	# Checkout
	co = checkout

	# Force push with lease to avoid overwriting commits not seen locally
	please = push --force-with-lease
	fpush = push --force-with-lease

	# Undo-commit
	undo-commit = reset --soft HEAD^

	# Clean merged branches
	clean-merged = "!git branch --merged | grep  -v '\\*\\|master\\|develop' | xargs -n 1 git branch -d"

	# Prune branches deleted from remote
	prune = fetch --prune

	# Stash all files including new files not added to tracking
	stash-all = stash save --include-untracked

	# Prettier git logs, still playing with these to figure out what I like
	glog = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
	glog2 = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen%cn%Creset %Cblue(%cr)%Creset' --abbrev-commit --date=relative

	# Show the original intent of a specific commit, helpful during rebases
	original = "!git show $(cat .git/rebase-apply/original-commit)"

	# Allow things like `git git git log` to work if you accidentally type git multiple times
	# git = "!git"

	# Fixing up an older commit
	# See https://blog.filippo.io/git-fixup-amending-an-older-commit/
	fixup = "!f() { TARGET=$(git rev-parse \"$1\"); git commit --fixup=$TARGET && GIT_EDITOR=true git rebase --interactive --autosquash $TARGET~; }; f"

	# Update submodules
	# Applying `alias gitsu='git submodule update --init --recursive'` as a bash alias is another way to accomplish this
	smu = submodule update

	# Create a WIP commit and amend previous commit if previous commit is a WIP commit
	# TODO: fix this, there's a syntax error somewhere
	# wip = "!f() { if [ "$(git log -1 --pretty=%B)" = "WIP" ]; then git commit --amend --no-edit else git commit -m "WIP" fi}; f"
	# Soft pop a previous WIP commit
	# unwip = "!f() { if [ "$(git log -1 --pretty=%B)" = "WIP" ]; then git reset HEAD^ else echo "No work in progress" fi}; f"

	# Sort by date for branches
  	refs-by-date = for-each-ref --sort=-committerdate --format='%(committerdate:short) %(refname:short)'

	# Stash snapshot - from http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
	snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"

	# Search for a given string in all patches and print commit messages.
	searchcommits = !"f() { query=\"$1\"; shift; git log -S\"$query\" \"$@\"; }; f \"$@\""

	# Show the history difference between a local branche and its remote
    divergence = log --left-right --graph --cherry-pick --oneline $1...origin/$1

	# Show what you've done since yesterday
    standup = log --since yesterday --author $(git config user.email) --pretty=short

	# Show which commits are safe to amend/rebase
    unpushed = log @{u}.

	# Git-Duet
	dci = duet-commit
	drv = duet-revert
	dmg = duet-merge
	drb = rebase -i --exec "git duet-commit --amend --reset-author"

[apply]

	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]

	# Use custom `.gitignore` and `.gitattributes`
	# excludesfile = ~/.gitignore
	# attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on macOS
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[commit]

	# https://help.github.com/articles/signing-commits-using-gpg/
	# gpgsign = true

[diff]

	# Detect copies as well as renames
	renames = copies
	# Enable an experimental heuristic that shifts the hunk boundary in an
	# attempt to make the resulting patch easier to read.
	compactionHeuristic = true
	colorMoved = zebra

[diff "bin"]

	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C

[help]

	# Automatically correct and execute mistyped commands
	# autocorrect = 1

[log]
	# Always decorate git log
	decorate = full

[merge]

	# Include summaries of merged commits in newly created merge commit messages
	log = true

	# Ensure every merge is a fast-forward merge. Helpful when working with a git rebase flow and prevents accidentally creating merge commits when not wanted
	# To override, use git merge --ff
	# https://git-scm.com/docs/git-config#git-config-mergeff
	ff = only

	# Add a third section for original changes to merge diffs
	# https://git-scm.com/docs/git-config#git-config-mergeconflictStyle
	conflictstyle = diff3

[pull]
	# Don't allow non-fast forward pulls into local branches
	# Override with `git pull --rebase` or `git pull --no-ff`
	ff = only

[push]

	# Simplify pushing to a remote branch with same name as local working branch
	# Refuse to push to remote braches with different names
	# https://git-scm.com/docs/git-config#git-config-pushdefault
	default = simple

	# Make `git push` push relevant annotated tags when pushing branches out.
	# https://git-scm.com/docs/git-config#git-config-pushfollowTags
	followTags = true

[rebase]
	# Automatically stash and unstash the working directory beofre and after rebases
	# Makes it possible to rebase with changes in the working directory
	autostash = true

	# When the commit log message begins with "squash! ..." (or "fixup! ..."), and there is a commit whose title begins with the same ..., automatically modify the todo list of rebase -i so that the commit marked for squashing comes right after the commit to be modified, and change the action of the moved commit from pick to squash (or fixup).
	autosquash = true

[status]
	# Shows all files underneath an untracked directory instead of just the directory
	# https://git-scm.com/docs/git-config#git-config-statusshowUntrackedFiles
	showUntrackedFiles = all

[stash]

	showPatch = true

[transfer]
	# Extra checks for data corruption when sending or receiving data
	# Note: could make things slower
	# https://git-scm.com/docs/git-config#git-config-transferfsckObjects
  # via https://groups.google.com/forum/#!topic/binary-transparency/f-BI4o8HZW0
	fsckobjects = true


# URL shorthands

[url "git@github.com:"]

	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

	insteadOf = "github:"

[url "git@gist.github.com:"]

	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

	insteadOf = "gist:"
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[http]
	postBuffer = 524288000
[credential]
	helper = osxkeychain
