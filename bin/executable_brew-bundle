#!/bin/bash

# Brew Bundle Management Script
# Enhanced with better error handling and logging
# Usage:
#   brew-bundle          - Install packages from Brewfile
#   brew-bundle dump     - Update Brewfile with currently installed packages
#   brew-bundle cleanup  - Remove packages not in Brewfile

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

BREWFILE="$HOME/.config/brew/Brewfile"

# Logging functions
log_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

usage() {
    echo "Usage: $(basename "$0") [command]"
    echo ""
    echo "Commands:"
    echo "  install   Install packages from Brewfile (default)"
    echo "  dump      Update Brewfile with currently installed packages"
    echo "  cleanup   Remove packages not listed in Brewfile"
    echo "  check     Check if all packages in Brewfile are installed"
    echo "  help      Show this help message"
    echo ""
    echo "Brewfile location: $BREWFILE"
}

install_packages() {
    if [[ ! -f "$BREWFILE" ]]; then
        log_error "Brewfile not found at: $BREWFILE"
        log_info "Run 'chezmoi apply' first to generate it"
        exit 1
    fi

    # Check if brew is available
    if ! command -v brew >/dev/null 2>&1; then
        log_error "Homebrew is not installed or not in PATH"
        exit 1
    fi

    log_info "Installing packages from $BREWFILE..."
    if brew bundle --file="$BREWFILE"; then
        log_success "Package installation completed"
    else
        log_error "Package installation failed"
        exit 1
    fi
}

dump_brewfile() {
    log_info "Updating Brewfile with currently installed packages..."
    log_warning "This will overwrite the managed Brewfile!"
    log_info "Consider updating packages.yaml instead"

    if ! command -v brew >/dev/null 2>&1; then
        log_error "Homebrew is not installed or not in PATH"
        exit 1
    fi

    read -p "Continue? (y/N) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        if brew bundle dump --file="$BREWFILE" --force; then
            log_success "Brewfile updated at $BREWFILE"
            log_info "Remember to update your chezmoi packages.yaml with these changes"
        else
            log_error "Failed to update Brewfile"
            exit 1
        fi
    else
        log_info "Operation cancelled"
    fi
}

cleanup_packages() {
    if [[ ! -f "$BREWFILE" ]]; then
        log_error "Brewfile not found at: $BREWFILE"
        exit 1
    fi

    if ! command -v brew >/dev/null 2>&1; then
        log_error "Homebrew is not installed or not in PATH"
        exit 1
    fi

    log_info "Removing packages not in Brewfile..."
    log_warning "This will uninstall packages not listed in $BREWFILE"
    read -p "Continue? (y/N) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        if brew bundle cleanup --file="$BREWFILE"; then
            log_success "Cleanup completed"
        else
            log_error "Cleanup failed"
            exit 1
        fi
    else
        log_info "Operation cancelled"
    fi
}

check_packages() {
    if [[ ! -f "$BREWFILE" ]]; then
        log_error "Brewfile not found at: $BREWFILE"
        exit 1
    fi

    if ! command -v brew >/dev/null 2>&1; then
        log_error "Homebrew is not installed or not in PATH"
        exit 1
    fi

    log_info "Checking packages in Brewfile..."
    if brew bundle check --file="$BREWFILE"; then
        log_success "All packages in Brewfile are installed"
    else
        log_warning "Some packages in Brewfile are not installed"
        exit 1
    fi
}

# Parse command
command="${1:-install}"

case "$command" in
    install|"")
        install_packages
        ;;
    dump)
        dump_brewfile
        ;;
    cleanup)
        cleanup_packages
        ;;
    check)
        check_packages
        ;;
    help|--help|-h)
        usage
        ;;
    *)
        log_error "Unknown command: $command"
        echo ""
        usage
        exit 1
        ;;
esac
